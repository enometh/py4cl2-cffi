;;; -*- Mode: LISP; Package: :cl-user; BASE: 10; Syntax: ANSI-Common-Lisp; -*-
;;;
;;;   Time-stamp: <>
;;;   Touched: Fri Dec 23 17:16:54 2022 +0530 <enometh@net.meer>
;;;   Bugs-To: enometh@net.meer
;;;   Status: Experimental.  Do not redistribute
;;;   Copyright (C) 2022 Madhu.  All Rights Reserved.
;;;
(in-package "CL-USER")

(defvar *py4cl2-cffi-source-dir*
  (merge-pathnames "Github/py4cl2-cffi/" (translate-logical-pathname "EXTERN:")))
(defvar *py4cl2-cffi-binary-dir* (binary-directory *py4cl2-cffi-source-dir*))


(mk:defsystem "py4cl2-cffi/config"
  :source-pathname *py4cl2-cffi-source-dir*
  :binary-pathname *py4cl2-cffi-binary-dir*
  :source-extension "lisp"
  :depends-on ("uiop")
  :components ((:module "src"
		:components ((:file "config")))))

#+nil
(mk:oos :py4cl2-cffi/config :load :compile-during-load t)

#+nil
(setq SWANK-LOADER::*FASL-DIRECTORY* *SWANK-BINARY-DIR*)
(assert (or (and (featurep :swank) (not (featurep :slynk)))
	    (and (featurep :slynk) (not (featurep :swank)))
	    (and (not (featurep :slynk)) (not (featurep :swank)))))


(mk:defsystem :py4cl2-cffi
  :source-pathname *py4cl2-cffi-source-dir*
  :binary-pathname *py4cl2-cffi-binary-dir*
  :source-extension "lisp"
  :depends-on ("bordeaux-threads"
               "cffi"
	       "cl-ppcre"
               "uiop"
               "alexandria"
               "trivial-garbage"
	       "optima"
               "iterate"
               "float-features"
	       "parse-number"
               "split-sequence"
               "py4cl2-cffi/config"
	       "trivial-backtrace"
	       (:feature :swank "swank")
	       (:feature :slynk "slynk"))

  :components
  ((:module "src"
    :components (;;(static-file "py4cl.py")
		 (:file "package")
		 (:file "lisp-utils")
		 (:file "numpy-installed-p")
		 ;; (:static-file "py4cl-utils.c")
		 (:file "shared-objects")
		 ;;(:static-file "libpy4cl-utils.so")
		 (:file "gil-gc")
		 (:file "numpy")
		 (:file "features")
		 (:file "pythonizers")
		 (:file "python-process")
		 (:file "lispifiers")
		 (:file "py-repr")
		 (:file "callpython")
		 (:file "arg-list")
		 (:file "import-export")
		 (:file "lisp-classes")
		 (:file "do-after-load")))))

#+nil
(mk:oos :py4cl2-cffi :load :compile-during-load t)
